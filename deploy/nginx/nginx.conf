worker_processes 2;
pid /tmp/nginx.pid;

events {

  use epoll;
  accept_mutex on;
  worker_connections 512;

}

http {

  client_body_temp_path /tmp/client_temp;
  proxy_temp_path       /tmp/proxy_temp_path;
  fastcgi_temp_path     /tmp/fastcgi_temp;
  uwsgi_temp_path       /tmp/uwsgi_temp;
  scgi_temp_path        /tmp/scgi_temp;

  server_tokens off;

  tcp_nodelay on;
  tcp_nopush on;

  # Logging

  # Excludes logging for requests with HTTP status codes 2xx (Success) and 3xx (Redirection)
  map $status $loggable {
    ~^[23]  0;
    default 1;
  }

  map $http_host $real_port {
    default 80;
    "~^[^\:]+:(?<p>\d+)$" $p;
  }

  log_format custom_format 'measure#nginx.service=$request_time content_type=$content_type '
                   'content_length=$content_length request_length=$request_length request_time=$request_time '
                   'status=$status';
  access_log '/dev/stdout' custom_format if=$loggable;
  error_log '/dev/stderr';

  include mime.types;
  default_type application/json;
  sendfile on;

  # Defines a timeout for reading client request body, period between two successive read operations (default 60s)
  client_body_timeout 10s;

  # Allows FastCGI server responses with codes greater than or equal to 300 to be passed to a client
  fastcgi_intercept_errors on;

  # Defines a timeout for establishing a connection with a proxied server (default 60s)
  proxy_connect_timeout 10s;

  # Defines a timeout for reading a response from the proxied server (default 60s)
  proxy_read_timeout 29s;

  # Server name must be without underscores
  upstream appserver {
    server localhost:8080 fail_timeout=0;
  }

  server {
    listen 8000;

    # error pages rewriting
    location @401_json {
      default_type application/json;
      return 200 '{"status":"ERROR","responseObject":{"code":"HTTP_401","message":"Unauthorized"}}';
    }

    location @403_json {
      default_type application/json;
      return 200 '{"status":"ERROR","responseObject":{"code":"HTTP_403","message":"Forbidden"}}';
    }

    error_page 404 @404_json;

    location @404_json {
      default_type application/json;
      return 404 '{"status":"ERROR","responseObject":{"code":"HTTP_404","message":"Not Found"}}';
    }

    error_page 500 502 503 504 @500_json;
    location @500_json {
      default_type application/json;
      return 200 '{"status":"ERROR","responseObject":{"code":"ERROR_GENERIC","message":"Unknown Error"}}';
    }

    # Sets a $real_scheme variable whose value is the scheme passed by the load
    # balancer in X-Forwarded-Proto, or to X-AppService-Proto in case of Azure
    # cloud deployment.
    set $real_scheme "http";
    set $probable_port "80";
    if ($http_x_forwarded_proto = "https") { # Generic proxy
      set $real_scheme "https";
      set $probable_port "443";
    }
    if ($http_x_appservice_proto = "https") { # Azure proxy
      set $real_scheme "https";
      set $probable_port "443";
    }
    if ($real_port = "80") {
      set $real_port $probable_port;
    }

    # global proxy configuration
    proxy_set_header Host $http_host;
    proxy_set_header X-Forwarded-Host $http_host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Port $real_port;
    proxy_set_header X-Forwarded-Proto $real_scheme;
    proxy_set_header X-Real-IP $remote_addr;

    proxy_intercept_errors on;
    proxy_pass_request_headers on;

    # locations configuration
    location ~ ^(/health|/mobile-utility-server/) {
      error_page 401 @401_json;

      error_page 403 @403_json;

      rewrite /health /mobile-utility-server/actuator/health break;

      proxy_pass http://appserver;
    }

    location = /favicon.ico {
      alias /etc/nginx/html/favicon.ico;
    }

    location = / {
      error_page 401 @401_json;

      error_page 403 @403_json;

      rewrite / /mobile-utility-server break;

      proxy_pass http://appserver;
    }

  }

}
